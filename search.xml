<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Python实现识别人脸轮廓并打印出来</title>
      <link href="/2020/03/28/2020/Python%E5%AE%9E%E7%8E%B0%E8%AF%86%E5%88%AB%E4%BA%BA%E8%84%B8%E8%BD%AE%E5%BB%93%E5%B9%B6%E6%89%93%E5%8D%B0%E5%87%BA%E6%9D%A5/"/>
      <url>/2020/03/28/2020/Python%E5%AE%9E%E7%8E%B0%E8%AF%86%E5%88%AB%E4%BA%BA%E8%84%B8%E8%BD%AE%E5%BB%93%E5%B9%B6%E6%89%93%E5%8D%B0%E5%87%BA%E6%9D%A5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p><span style="color:green;font-size:14px">快速实现一个人脸landmark识别。</p></blockquote><hr /><p>说明：</p><ul><li>通过python的face_recognition模块实现人脸检测功能，首先需要安装好face_recognition包：可通过pycharm直接安装，也可以用pip安装，还可以通过anaconda安装。</li></ul><p>示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># 自动识别人脸特征</span></span><br><span class="line"><span class="comment"># filename : find_facial_features_in_picture.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageDraw</span><br><span class="line"><span class="keyword">import</span> face_recognition</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将jpg文件加载到numpy 数组中</span></span><br><span class="line">image = face_recognition.load_image_file(<span class="string">"linuxidc.com.jpg"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#查找图像中所有面部的所有面部特征</span></span><br><span class="line">face_landmarks_list = face_recognition.face_landmarks(image)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"I found &#123;&#125; face(s) in this photograph."</span>.format(len(face_landmarks_list)))</span><br><span class="line">pil_image = Image.fromarray(image)</span><br><span class="line">d = ImageDraw.Draw(pil_image)</span><br><span class="line"><span class="keyword">for</span> face_landmarks <span class="keyword">in</span> face_landmarks_list:</span><br><span class="line">    <span class="comment">#打印此图像中每个面部特征的位置</span></span><br><span class="line">    facial_features = [</span><br><span class="line">        <span class="string">'chin'</span>,</span><br><span class="line">        <span class="string">'left_eyebrow'</span>,</span><br><span class="line">        <span class="string">'right_eyebrow'</span>,</span><br><span class="line">        <span class="string">'nose_bridge'</span>,</span><br><span class="line">        <span class="string">'nose_tip'</span>,</span><br><span class="line">        <span class="string">'left_eye'</span>,</span><br><span class="line">        <span class="string">'right_eye'</span>,</span><br><span class="line">        <span class="string">'top_lip'</span>,</span><br><span class="line">        <span class="string">'bottom_lip'</span></span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">for</span> facial_feature <span class="keyword">in</span> facial_features:</span><br><span class="line">        print(<span class="string">"The &#123;&#125; in this face has the following points: &#123;&#125;"</span>.format(facial_feature, face_landmarks[facial_feature]))</span><br><span class="line">    <span class="comment">#在图像中画出每个人脸特征！</span></span><br><span class="line">    <span class="keyword">for</span> facial_feature <span class="keyword">in</span> facial_features:</span><br><span class="line">        d.line(face_landmarks[facial_feature], width=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">pil_image.show()</span><br></pre></td></tr></table></figure><p>自动识别出人脸特征(轮廓)，如下图：<br /><img src="/img/loading.gif" class="lazyload" data-src="https://pic.downk.cc/item/5eb2d344c2a9a83be55945d5.jpg"  alt="码农日志" /></p><hr /><blockquote><p><span style="color:gray;font-size:14px">关注公众号「码农日志」，每天带你发车。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图像识别 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我是流浪的人</title>
      <link href="/2020/03/24/2020/%E6%88%91%E6%98%AF%E6%B5%81%E6%B5%AA%E7%9A%84%E4%BA%BA/"/>
      <url>/2020/03/24/2020/%E6%88%91%E6%98%AF%E6%B5%81%E6%B5%AA%E7%9A%84%E4%BA%BA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p><span style="color:green;font-size:14px">有时候莫名的孤独，强烈的执念，将现实中的我拉向回忆。</p></blockquote><hr /><p>2020庚子年，我在老婆家过年，这一呆就是俩月。时至今日，我已回京数日，尚在隔离期。</p><p>老婆怀孕已12周，两天前告诉我，要有一个孩子跟她姓，我内心非常抵触。抵触的不是跟谁姓的问题，而是因为感觉告诉我这不是她的主意，她却不告诉我什么原因。岳父一直催着让我辞掉北京的这份工作，回老家上班。这次过年，催的更急了，刚回京一周就接到两次电话。</p><p>自从高中起，父亲的身体就每况愈下，那时候的我每日无心读书，整天整夜上网吧。清晰记得高考完的那天晚上在网吧阳台上，看着乌云密布的夜空，内心五味陈杂，那时候知道后悔了。那个暑假我在家抱两个月大的侄子两个多月，后来不知怎地就又回去复读。复习的这一年，我发奋的读书，大逆不道的将父亲骂我的话写在课桌上，上学期座位只选第一排第一个，下学期座位都在前三排靠过道，制定没分每秒清晰的计划，没完成的时候就吃饭时走路时睡觉前全部清掉，印象最深刻的是吃饭的时候思考着数学题思路，无数个睡梦中计算着没有计算完的题目…</p><p>后来，高四的成绩终有不负，从上年连二专都不挂的分数上升到了二本，接近一本的好成绩。最高兴的要数父亲了，老张家终于要出一个大学生了，而这，也是我的骄傲。从此，我深信精诚所至金石为开，因为，这一年我都只有一个执念，给父亲一个证明，我还凭良心。可是这些美好已经太晚，父亲的身体大不如从前了。现在想来，从2008年医生告诉我父亲还有最多8年的寿命时，我就应该清醒，过去的几年我浪费的起，可是父亲的许多心愿未了，他等不起。不过，如今我已选择原谅那时16岁的我。</p><p>到了大学，父亲的身体更加不好了。农历2014年腊月二十五/阳历2015年2月13日，晚22时前后，还在昆山东阳精密制造厂打寒假工的我接到哥从老家打来的电话，父亲不行了。瞬间犹如晴天霹雳，我赶紧收拾行李，立刻回家。车上的我早已泣不成声，从来没想到前两日的电话竟是与我父的最后一次对话，那时候我明显听到父亲说话的力气，如喉咙被满满阻塞的哽咽的语气对我说：好，别管我。儿当时听出父亲的状况，心中却有一种声音劝自己无论如何也要打完工回去，只是默祈父亲如以往平安。我又回了一句：我没事，别挂念我，我过年可能不回家了。然后父亲喉咙深处听起来一下子多了更多的哽咽，吃力的回答：好。这一个字，我一辈子不能忘，每每想起，思绪都穿透时光而来，折磨着我的良心，如刀子，鞭子，深深的抽打着。父亲临去前都没有将儿唤回床侧，我恨自己也恨苍天，思绪交错如上弦之箭，我毫不躲避的让它深深插在心窝。这是一个死结，我挣不脱也逃不过，永远也不能原谅自己。</p><p>前些日子跟老妈视频，她告诉我又想我了，一种许久没能让母亲见上我一面的愧疚感油然而生，瞬间掩不住的眼泪就来了。</p><p>种种回忆交织，如果连老婆都没有跟我站在同一立场，你说，我是否是一个孤独的人?</p><hr /><blockquote><p><span style="color:gray;font-size:14px">关注公众号「码农日志」，每天带你发车。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 回忆录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 碎碎念 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Numpy 修炼之道 （4）—— 基本运算操作</title>
      <link href="/2020/02/12/2019/Numpy%20%E4%BF%AE%E7%82%BC%E4%B9%8B%E9%81%93%20%EF%BC%884%EF%BC%89%E2%80%94%E2%80%94%20%E5%9F%BA%E6%9C%AC%E8%BF%90%E7%AE%97%E6%93%8D%E4%BD%9C/"/>
      <url>/2020/02/12/2019/Numpy%20%E4%BF%AE%E7%82%BC%E4%B9%8B%E9%81%93%20%EF%BC%884%EF%BC%89%E2%80%94%E2%80%94%20%E5%9F%BA%E6%9C%AC%E8%BF%90%E7%AE%97%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p><span style="color:green;font-size:14px">Numpy系列总结。</p></blockquote><hr /><h4 id="算术运算说明"><a class="markdownIt-Anchor" href="#算术运算说明"></a> 算术运算说明</h4><p>Numpy 中数组上的算术运算符使用元素级别，最后的结果使用新的一个数组来返回。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; a = np.array( [20,30,40,50] )</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; b = np.arange( 4 )</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; b</span></span><br><span class="line">array([0, 1, 2, 3])</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; c = a-b</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; c</span></span><br><span class="line">array([20, 29, 38, 47])</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; b**2</span></span><br><span class="line">array([0, 1, 4, 9])</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; a&lt;35</span></span><br><span class="line">array([ True, True, False, False], dtype=bool)</span><br></pre></td></tr></table></figure><h4 id="乘法运算注意点"><a class="markdownIt-Anchor" href="#乘法运算注意点"></a> 乘法运算注意点</h4><p>乘法运算符*的运算在NumPy数组中也是元素级别的（这与许多矩阵语言不同）。如果想要执行矩阵乘积，可以使用dot函数：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; A = np.array( [[1,1], [0,1]] )</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; B = np.array( [[2,0], [3,4]] )</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; A</span></span><br><span class="line">array([[1, 1],</span><br><span class="line">       [0, 1]])</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; B</span></span><br><span class="line">array([[2, 0],</span><br><span class="line">       [3, 4]])</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; A*B                         <span class="comment"># 元素乘积（elementwise product）</span></span></span><br><span class="line">array([[2, 0],</span><br><span class="line">       [0, 4]])</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; A.dot(B)                    <span class="comment"># 矩阵相乘（matrix product）</span></span></span><br><span class="line">array([[5, 4],</span><br><span class="line">       [3, 4]])</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; np.dot(A, B)                <span class="comment"># 矩阵相乘的另一种方式（another matrix product）</span></span></span><br><span class="line">array([[5, 4],</span><br><span class="line">       [3, 4]])</span><br></pre></td></tr></table></figure><h4 id="特殊操作"><a class="markdownIt-Anchor" href="#特殊操作"></a> 特殊操作</h4><p>某些操作（如<code>+=</code>和<code>*=</code>）可以修改现有数组，而不是创建新数组。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; a = np.ones((2,3), dtype=np.int32)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; b = np.random.random((2,3))</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; a *= 3</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; a</span></span><br><span class="line">array([[3, 3, 3],</span><br><span class="line">       [3, 3, 3]])</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; a.dtype</span></span><br><span class="line">dtype('int32')</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; b.dtype</span></span><br><span class="line">dtype('float64')</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; b += a</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; b</span></span><br><span class="line">array([[ 3.42443069,  3.78421247,  3.46533145],</span><br><span class="line">       [ 3.30761202,  3.1504406 ,  3.23310437]])</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; a += b</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File "&lt;stdin&gt;", line 1, in &lt;module&gt;</span><br><span class="line">TypeError: Cannot cast ufunc add output from dtype('float64') to dtype('int32') with casting rule 'same_kind'</span><br></pre></td></tr></table></figure><p>当使用不同类型的数组操作时，结果数组的类型对应于更一般或更精确的数组（称为向上转换的行为）。</p><p>由于定义 a时，数据类型指定为np.int32，而 a+b 生成的数据类型为 np.float64，所以自动转换出错。</p><hr /><blockquote><p><span style="color:gray;font-size:14px">关注公众号「码农日志」，每天带你发车。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Numpy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Numpy 修炼之道 （3）—— 数据类型</title>
      <link href="/2019/12/28/2019/Numpy%20%E4%BF%AE%E7%82%BC%E4%B9%8B%E9%81%93%20%EF%BC%883%EF%BC%89%E2%80%94%E2%80%94%20%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2019/12/28/2019/Numpy%20%E4%BF%AE%E7%82%BC%E4%B9%8B%E9%81%93%20%EF%BC%883%EF%BC%89%E2%80%94%E2%80%94%20%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p><span style="color:green;font-size:14px">Numpy 中的数组比 Python 原生中的数组（只支持整数类型与浮点类型）强大的一点就是它支持更多的数据类型。</p></blockquote><hr /><h3 id="基本数据类型"><a class="markdownIt-Anchor" href="#基本数据类型"></a> 基本数据类型</h3><p>Numpy 常见的基本数据类型如下：</p><table><thead><tr><th>数据类型</th><th>描述</th></tr></thead><tbody><tr><td>bool_</td><td>布尔（True或False），存储为一个字节</td></tr><tr><td>int_</td><td>默认整数类型（与C long相同；通常为int64或int32）</td></tr><tr><td>intc</td><td>与C int（通常为int32或int64）相同</td></tr><tr><td>intp</td><td>用于索引的整数（与C ssize_t相同；通常为int32或int64）</td></tr><tr><td>int8</td><td>字节（-128到127）</td></tr><tr><td>int16</td><td>整数（-32768到32767）</td></tr><tr><td>int32</td><td>整数（-2147483648至2147483647）</td></tr><tr><td>int64</td><td>整数（-9223372036854775808至9223372036854775807）</td></tr><tr><td>uint8</td><td>无符号整数（0到255）</td></tr><tr><td>uint16</td><td>无符号整数（0到65535）</td></tr><tr><td>uint32</td><td>无符号整数（0至4294967295）</td></tr><tr><td>uint64</td><td>无符号整数（0至18446744073709551615）</td></tr><tr><td>float_</td><td>float64的简写。</td></tr><tr><td>float16</td><td>半精度浮点：符号位，5位指数，10位尾数</td></tr><tr><td>float32</td><td>单精度浮点：符号位，8位指数，23位尾数</td></tr><tr><td>float64</td><td>双精度浮点：符号位，11位指数，52位尾数</td></tr><tr><td>complex_</td><td>complex128的简写。</td></tr><tr><td>complex64</td><td>复数，由两个32位浮点（实数和虚数分量）</td></tr><tr><td>complex128</td><td>复数，由两个64位浮点（实数和虚数分量）</td></tr></tbody></table><p>以上这些数据类型都可以通过 <code>np.bool_</code>、<code>np.float32</code>等方式访问。</p><p>这些类型都可以在创建 <code>ndarray</code> 时通过参数 <code>dtype</code> 来指定。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; a = np.arange(3, dtype=np.float16)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; a</span></span><br><span class="line">array([ 0.,  1.,  2.])</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; a.dtype</span></span><br><span class="line">dtype('float16')</span><br></pre></td></tr></table></figure><p>此外，在创建 <code>ndarray</code> 对象时，也可以通过字符代码来替换，主要是为了保持与较旧包（例如Numeric）的向后兼容性。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; np.array([1, 2, 3], dtype=<span class="string">'f'</span>)</span></span><br><span class="line">array([ 1.,  2.,  3.], dtype=float32)</span><br><span class="line">但是不推荐使用这种字符代码的方式</span><br></pre></td></tr></table></figure><h3 id="类型转换"><a class="markdownIt-Anchor" href="#类型转换"></a> 类型转换</h3><p>要转换数组的类型，请使用.astype()方法（首选）或类型本身作为函数。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; a</span></span><br><span class="line">array([ 0.,  1.,  2.])</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; a.astype(np.bool_)</span></span><br><span class="line">array([False,  True,  True], dtype=bool)</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; np.bool_(a)</span></span><br><span class="line">array([False,  True,  True], dtype=bool)</span><br></pre></td></tr></table></figure><hr /><blockquote><p><span style="color:gray;font-size:14px">关注公众号「码农日志」，每天带你发车。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Numpy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Numpy 修炼之道 （2）—— N维数组 ndarray</title>
      <link href="/2019/12/17/2019/Numpy%20%E4%BF%AE%E7%82%BC%E4%B9%8B%E9%81%93%20%EF%BC%882%EF%BC%89%E2%80%94%E2%80%94%20N%E7%BB%B4%E6%95%B0%E7%BB%84%20ndarray/"/>
      <url>/2019/12/17/2019/Numpy%20%E4%BF%AE%E7%82%BC%E4%B9%8B%E9%81%93%20%EF%BC%882%EF%BC%89%E2%80%94%E2%80%94%20N%E7%BB%B4%E6%95%B0%E7%BB%84%20ndarray/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p><span style="color:green;font-size:14px">Numpy 中最重要的一个对象就是 ndarray。</p></blockquote><hr /><h3 id="ndarray-结构图"><a class="markdownIt-Anchor" href="#ndarray-结构图"></a> ndarray 结构图</h3><ul><li>ndarray中的每个元素在内存中使用相同大小的块。</li><li>ndarray中的每个元素是数据类型对象的对象(称为 dtype)。</li></ul><p>从ndarray对象提取的任何元素(通过切片)由一个数组标量类型的 Python 对象表示。<br />下图显示了ndarray，数据类型对象(dtype)和数组标量类型之间的关系。<br /><img src="/img/loading.gif" class="lazyload" data-src="https://pic.downk.cc/item/5eb2d80dc2a9a83be55e2ac5.jpg"  alt="码农日志" /></p><h3 id="构建ndarray"><a class="markdownIt-Anchor" href="#构建ndarray"></a> 构建ndarray</h3><p>打开 Python 终端</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; import numpy as np</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; a = np.array([0, 1, 2, 3]) <span class="comment"># 1-D</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; a</span></span><br><span class="line">array([0, 1, 2, 3])</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; b = np.array([[0, 1, 2], [3, 4, 5]]) <span class="comment"># 2-D， 2 row x 3 col</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; b</span></span><br><span class="line">array([[0, 1, 2],</span><br><span class="line"> [3, 4, 5]])</span><br></pre></td></tr></table></figure><p>上面的方式是最基本的方法，也是最笨的方法，下面看一些非常“鸡贼”的方法。</p><p>使用一些跟数值范围相关的函数来创建。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; a = np.arange(10) <span class="comment"># 生成 0-5 数组</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; a</span></span><br><span class="line">array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; b = np.arange(1, 6, 2) <span class="comment"># 生成开始为 1，结束为 5（6-1），步长为 2 数组</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; b</span></span><br><span class="line">array([1, 3, 5])</span><br></pre></td></tr></table></figure><h4 id="常用的数组"><a class="markdownIt-Anchor" href="#常用的数组"></a> 常用的数组</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; a = np.ones((3, 3)) <span class="comment"># reminder: (3, 3) is a tuple</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; a</span></span><br><span class="line">array([[ 1., 1., 1.],</span><br><span class="line"> [ 1., 1., 1.],</span><br><span class="line"> [ 1., 1., 1.]])</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; b = np.zeros((2, 2))</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; b</span></span><br><span class="line">array([[ 0., 0.],</span><br><span class="line"> [ 0., 0.]])</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; c = np.eye(3) <span class="comment"># 单位矩阵</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; c</span></span><br><span class="line">array([[ 1., 0., 0.],</span><br><span class="line"> [ 0., 1., 0.],</span><br><span class="line"> [ 0., 0., 1.]])</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; d = np.diag(np.array([1, 2, 3, 4])) <span class="comment"># 对角矩阵</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; d</span></span><br><span class="line">array([[1, 0, 0, 0],</span><br><span class="line"> [0, 2, 0, 0],</span><br><span class="line"> [0, 0, 3, 0],</span><br><span class="line"> [0, 0, 0, 4]])</span><br></pre></td></tr></table></figure><h4 id="随机数组"><a class="markdownIt-Anchor" href="#随机数组"></a> 随机数组</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; a = np.random.rand(2, 3)       <span class="comment"># uniform in [0, 1]</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; a</span></span><br><span class="line">array([[ 0.6713131 ,  0.36077404,  0.13295515],</span><br><span class="line">     [ 0.21052194,  0.39054944,  0.24861006]])</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; b = np.random.randn(2, 3)      <span class="comment"># Gaussian</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; b</span></span><br><span class="line">array([[-1.25166408, -0.61573192, -0.41214682],</span><br><span class="line">     [-0.25353635,  1.04938271,  0.02308834]])</span><br></pre></td></tr></table></figure><h4 id="nddaray常用属性"><a class="markdownIt-Anchor" href="#nddaray常用属性"></a> nddaray常用属性</h4><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>ndarray.flags</td><td>有关数组的内存布局的信息。</td></tr><tr><td>ndarray.shape</td><td>数组维数组。</td></tr><tr><td>ndarray.strides</td><td>遍历数组时，在每个维度中步进的字节数组。</td></tr><tr><td>ndarray.ndim</td><td>数组维数，在Python世界中，维度的数量被称为rank。</td></tr><tr><td>ndarray.data</td><td>Python缓冲区对象指向数组的数据的开始。</td></tr><tr><td>ndarray.size</td><td>数组中的元素总个数。</td></tr><tr><td>ndarray.itemsize</td><td>一个数组元素的长度（以字节为单位）。</td></tr><tr><td>ndarray.nbytes</td><td>数组的元素消耗的总字节数。</td></tr><tr><td>ndarray.base</td><td>如果内存是来自某个其他对象的基本对象。</td></tr><tr><td>ndarray.dtype</td><td>数组元素的数据类型。</td></tr><tr><td>ndarray.T</td><td>数组的转置。</td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; a = np.array([(2,3,4), (5,6,7)])</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; a.flags</span></span><br><span class="line">  C_CONTIGUOUS : True</span><br><span class="line">  F_CONTIGUOUS : False</span><br><span class="line">  OWNDATA : True</span><br><span class="line">  WRITEABLE : True</span><br><span class="line">  ALIGNED : True</span><br><span class="line">  UPDATEIFCOPY : False</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; a.shape(2L, 3L)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; a.ndim</span></span><br><span class="line">2</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; a.strides(12L, 4L)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; a.data</span></span><br><span class="line">&lt;read-write buffer for 0x00000000099EA2B0, size 24, offset 0 at 0x0000000009953B20</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;&gt; a.size</span></span><br><span class="line">6</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; a.itemsize</span></span><br><span class="line">4</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; a.nbytes</span></span><br><span class="line">24</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; a.dtype</span></span><br><span class="line">dtype('int32')</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; a.T</span></span><br><span class="line">array([[2, 5],</span><br><span class="line">     [3, 6],</span><br><span class="line">     [4, 7]])</span><br></pre></td></tr></table></figure><hr /><blockquote><p><span style="color:gray;font-size:14px">关注公众号「码农日志」，每天带你发车。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Numpy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Numpy 修炼之道（1） —— 什么是 Numpy</title>
      <link href="/2019/12/10/2019/Numpy%20%E4%BF%AE%E7%82%BC%E4%B9%8B%E9%81%93%20%EF%BC%881%EF%BC%89%E2%80%94%E2%80%94%20%E4%BB%80%E4%B9%88%E6%98%AF%20Numpy/"/>
      <url>/2019/12/10/2019/Numpy%20%E4%BF%AE%E7%82%BC%E4%B9%8B%E9%81%93%20%EF%BC%881%EF%BC%89%E2%80%94%E2%80%94%20%E4%BB%80%E4%B9%88%E6%98%AF%20Numpy/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p><span style="color:green;font-size:14px">Numpy系列总结。</p></blockquote><hr /><h3 id="numpy-是什么"><a class="markdownIt-Anchor" href="#numpy-是什么"></a> Numpy 是什么</h3><p>简单来说，Numpy 是 Python 的一个科学计算包，包含了多维数组以及多维数组的操作。</p><p>Numpy 的核心是 ndarray 对象，这个对象封装了同质数据类型的n维数组。起名 ndarray 的原因就是因为是 n-dimension-array 的简写。</p><h3 id="ndarray-与-python-原生-array-有什么区别"><a class="markdownIt-Anchor" href="#ndarray-与-python-原生-array-有什么区别"></a> ndarray 与 python 原生 array 有什么区别</h3><ul><li>NumPy 数组在创建时有固定的大小，不同于Python列表（可以动态增长）。更改ndarray的大小将创建一个新的数组并删除原始数据。</li><li>NumPy 数组中的元素都需要具有相同的数据类型，因此在存储器中将具有相同的大小。数组的元素如果也是数组（可以是 Python 的原生 array，也可以是 ndarray）的情况下，则构成了多维数组。</li><li>NumPy 数组便于对大量数据进行高级数学和其他类型的操作。通常，这样的操作比使用Python的内置序列可能更有效和更少的代码执行。</li><li>越来越多的科学和数学的基于Python的包使用NumPy数组，所以需要学会 Numpy 的使用。</li></ul><h3 id="numpy-的矢量化向量化功能"><a class="markdownIt-Anchor" href="#numpy-的矢量化向量化功能"></a> Numpy 的矢量化（向量化）功能</h3><p>如果想要将一个2-D数组 a 的每个元素与长度相同的另外一个数组 b 中相应位置的元素相乘，使用 Java 原生的数组实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; rows; i++): &#123;</span><br><span class="line">  <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; columns; j++): &#123;</span><br><span class="line">    c[i][j] = a[i][j]*b[i][j];</span><br><span class="line">  &#125;&#125;</span><br></pre></td></tr></table></figure><p>使用 Numpy 实现的话，则可以直接使用矢量化功能：<br />c = a * b</p><p>矢量化代码有很多优点，其中包括：</p><ul><li>矢量化代码更简洁易读</li><li>更少的代码行通常意味着更少的错误</li><li>该代码更接近地类似于标准数学符号（使得更容易，通常，以正确地编码数学构造）</li><li>矢量化导致更多的“Pythonic”代码。如果没有向量化，我们的代码将会效率很低，难以读取for循环。</li></ul><hr /><blockquote><p><span style="color:gray;font-size:14px">关注公众号「码农日志」，每天带你发车。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Numpy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Opencv-Python实现2048小游戏</title>
      <link href="/2019/10/21/2019/%E4%BD%BF%E7%94%A8Opencv-Python%E5%AE%9E%E7%8E%B02048%E5%B0%8F%E6%B8%B8%E6%88%8F/"/>
      <url>/2019/10/21/2019/%E4%BD%BF%E7%94%A8Opencv-Python%E5%AE%9E%E7%8E%B02048%E5%B0%8F%E6%B8%B8%E6%88%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p><span style="color:green;font-size:14px">因为并不是真的要写一个游戏，只是复习一下一些基础操作。</p></blockquote><hr /><p>本文源码地址：<br /><a href="https://github.com/PyElite/2048-opencv-python.git" target="_blank" rel="noopener">https://github.com/PyElite/2048-opencv-python.git</a></p><p>代码为Python语言，需要如下模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> random</span><br></pre></td></tr></table></figure><p>接着，要实现2048小游戏，需要一些全局变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用于随机产生新元素 为了方便调整概率以列表形式创建</span></span><br><span class="line">new_nums = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">new_vals = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>]</span><br><span class="line"><span class="comment"># 4x4的游戏数据</span></span><br><span class="line">data = np.array([[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">                 [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">                 [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">                 [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]])</span><br><span class="line"><span class="comment"># 用于记录鼠标滑动的数据： 开始（按下） 和结束（抬起）</span></span><br><span class="line">m_start = [<span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">m_end = [<span class="number">0</span>, <span class="number">0</span>]</span><br></pre></td></tr></table></figure><p>然后是各功能代码</p><h3 id="1-游戏背景图"><a class="markdownIt-Anchor" href="#1-游戏背景图"></a> 1 游戏背景图</h3><p>在python中，opencv没有“Mat”数据类型，而是直接使用了Numpy中的数组，原本Mat的操作全部变成np数组的操作了。 比如创建一张白色的图像作为2048小游戏的基础背景图：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建背景图</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_back</span><span class="params">()</span>:</span></span><br><span class="line">    color = (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>)</span><br><span class="line">    img = np.array([[color <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">450</span>)]<span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">450</span>)], dtype=np.uint8)</span><br><span class="line">    <span class="keyword">return</span> img</span><br></pre></td></tr></table></figure><p>就是一张450x450的白色图像，不展示了</p><h3 id="2-数字块的图"><a class="markdownIt-Anchor" href="#2-数字块的图"></a> 2 数字块的图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建色块</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_block</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="comment"># 获取数字位数</span></span><br><span class="line">    index = len(str(num))</span><br><span class="line">    <span class="comment"># 16个格最大数字不会超过2的16次方 也就是65536，也就是5位数，</span></span><br><span class="line">    <span class="comment"># 根据数字长度来确定块的颜色、文字大小、粗细、位置</span></span><br><span class="line">    greens = [<span class="number">180</span>, <span class="number">162</span>, <span class="number">144</span>, <span class="number">126</span>, <span class="number">108</span>]</span><br><span class="line">    font_sizes = [<span class="number">2.75</span>, <span class="number">1.75</span>, <span class="number">1.25</span>, <span class="number">1</span>, <span class="number">0.875</span>]</span><br><span class="line">    thickness_s = [<span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>]</span><br><span class="line">    color = (<span class="number">54</span>, greens[index - <span class="number">1</span>], <span class="number">60</span>)</span><br><span class="line">    font_size = font_sizes[index<span class="number">-1</span>]</span><br><span class="line">    thickness = thickness_s[index - <span class="number">1</span>]</span><br><span class="line">    pos = (int(<span class="number">24</span> - (<span class="number">3.3</span> * index)), int(<span class="number">85</span> - (<span class="number">6.5</span> * index)))</span><br><span class="line">    <span class="comment"># 创建数字块</span></span><br><span class="line">    img = np.array([[color <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>)] <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">100</span>)], dtype=np.uint8)</span><br><span class="line">    <span class="keyword">if</span> num &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="comment">#  大于0的数字进行绘制</span></span><br><span class="line">        cv2.putText(img, str(num), pos, cv2.FONT_HERSHEY_SIMPLEX, font_size, (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>), thickness)</span><br><span class="line">    <span class="keyword">return</span> img</span><br></pre></td></tr></table></figure><p>把2、4、8、16……65536一共16个数字的块全部show出来就是这样，随着数字增大，块的颜色加深（这里漏了“1”，请谅解）。<br /><img src="/img/loading.gif" class="lazyload" data-src="https://pic.downk.cc/item/5eb2d8d3c2a9a83be55ee846.png"  alt="码农日志" /></p><h3 id="3-游戏的滑动操作opencv-python响应鼠标事件"><a class="markdownIt-Anchor" href="#3-游戏的滑动操作opencv-python响应鼠标事件"></a> 3 游戏的滑动操作（Opencv-Python响应鼠标事件）</h3><p>Opencv-Python中支持的鼠标事件有以下这些。<br />事件编号注释<br />CV_EVENT_MOUSEMOVE0滑动<br />EVENT_LBUTTONDOWN1左键点击<br />EVENT_RBUTTONDOWN2右键点击<br />EVENT_MBUTTONDOWN3中间点击<br />EVENT_LBUTTONUP4左键释放<br />EVENT_RBUTTONUP5右键释放<br />EVENT_MBUTTONUP6中间释放<br />EVENT_LBUTTONDBLCLK7左键双击<br />EVENT_RBUTTONDBLCLK8右键双击<br />EVENT_MBUTTONDBLCLK9中间双击<br />这里主要用到 鼠标左键的按下和抬起</p><h4 id="第一步注册鼠标事件函数"><a class="markdownIt-Anchor" href="#第一步注册鼠标事件函数"></a> 第一步，注册鼠标事件函数：</h4><p>在游戏初始化，启动的时候，定义窗体名称，绑定鼠标事件函数，然后生成最开始的数字块，并显示画面</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始化游戏界面</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">game_run</span><span class="params">()</span>:</span></span><br><span class="line">    cv2.namedWindow(<span class="string">"2048"</span>, cv2.WINDOW_AUTOSIZE)</span><br><span class="line">    cv2.setMouseCallback(<span class="string">"2048"</span>, mouse_event)</span><br><span class="line">    new_elements()</span><br><span class="line">    img = game_image()</span><br><span class="line">    cv2.imshow(<span class="string">"2048"</span>, img)</span><br><span class="line">    cv2.waitKey(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h4 id="第二步实现鼠标响应函数"><a class="markdownIt-Anchor" href="#第二步实现鼠标响应函数"></a> 第二步，实现鼠标响应函数：</h4><p>左键按下记录坐标，左键抬起记录坐标，然后计算前后坐标判断是向哪个方向的滑动，执行相应函数（即移动数字块，相邻且相同的求和），接着再生成新的数字块，更新界面。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 鼠标事件</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mouse_event</span><span class="params">(event, x, y, flags, param)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> m_start, m_end</span><br><span class="line">    <span class="keyword">if</span> event == cv2.EVENT_LBUTTONDOWN:</span><br><span class="line">        m_start = [x, y]</span><br><span class="line">    <span class="keyword">if</span> event == cv2.EVENT_LBUTTONUP:</span><br><span class="line">        m_end = [x, y]</span><br><span class="line">        dx = m_end[<span class="number">0</span>] - m_start[<span class="number">0</span>]</span><br><span class="line">        dy = m_end[<span class="number">1</span>] - m_start[<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> abs(dx) &gt; abs(dy):</span><br><span class="line">            <span class="keyword">if</span> dx &gt; <span class="number">0</span>:</span><br><span class="line">                to_right()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                to_left()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> dy &gt; <span class="number">0</span>:</span><br><span class="line">                to_bottom()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                to_top()</span><br><span class="line">        img = game_image()</span><br><span class="line">        cv2.imshow(<span class="string">"2048"</span>, img)</span><br><span class="line">        <span class="comment"># 滑动后更新画面，停顿一下再插入新的数字使有动画的感觉</span></span><br><span class="line">        cv2.waitKey(<span class="number">100</span>)  </span><br><span class="line">        new_elements()</span><br><span class="line">        img = game_image()</span><br><span class="line">        cv2.imshow(<span class="string">"2048"</span>, img)</span><br><span class="line">        m_start = [<span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">        m_end = [<span class="number">0</span>, <span class="number">0</span>]</span><br></pre></td></tr></table></figure><h3 id="4-每滑动一次随机产生新的数字块python数组随机取元素"><a class="markdownIt-Anchor" href="#4-每滑动一次随机产生新的数字块python数组随机取元素"></a> 4 每滑动一次随机产生新的数字块（Python数组随机取元素）</h3><p>这里主要用到了random模块里面的<br />random.choice()----&gt;从列表中随机取一个元素<br />random.sample()------&gt;从列表中随机取指定个数个元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 产生新元素</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new_elements</span><span class="params">()</span>:</span></span><br><span class="line">    pos_list_t = np.where(data == <span class="number">0</span>)</span><br><span class="line">    pos_list = [(pos_list_t[<span class="number">0</span>][i], pos_list_t[<span class="number">1</span>][i])</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> range(len(pos_list_t[<span class="number">0</span>]))]</span><br><span class="line">    <span class="comment"># 随机一个新元素的个数</span></span><br><span class="line">    nums = random.choice(new_nums)</span><br><span class="line">    <span class="keyword">if</span> nums &gt;= len(pos_list):</span><br><span class="line">        nums = <span class="number">1</span></span><br><span class="line">    <span class="comment"># 随机一个新元素的位置</span></span><br><span class="line">    new_poss = random.sample(pos_list, nums)</span><br><span class="line">    <span class="keyword">for</span> pos <span class="keyword">in</span> new_poss:</span><br><span class="line">        <span class="comment"># 随机一个新元素的数值</span></span><br><span class="line">        data[pos[<span class="number">0</span>]][pos[<span class="number">1</span>]] = random.choice(new_vals)</span><br></pre></td></tr></table></figure><h3 id="5-上下左右的滑动处理"><a class="markdownIt-Anchor" href="#5-上下左右的滑动处理"></a> 5 上下左右的滑动处理</h3><p>前三个就是涉及的技术核心，接下来就是算法核心，向一个方向滑动，就是4x4的矩阵中，非零数字向指定方向移动，然后把相邻且相同的数字求和变成一个数字。</p><p>以第一行向左滑动一次举个例子，</p><p>[1, 0, 1, 2]–&gt;[1, 1, 2, 0]–&gt;[2, 0, 2, 0]–&gt;[2, 2, 0, 0]</p><p>代码如下（如果你们有更简单快速的方法，务必留言教教我）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 向左滑动</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">to_left</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">        index = <span class="number">0</span></span><br><span class="line">        t = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">            <span class="keyword">if</span> data[i][x] &gt; <span class="number">0</span>:</span><br><span class="line">                t[index] = data[i][x]</span><br><span class="line">                data[i][x] = <span class="number">0</span></span><br><span class="line">                n = x + <span class="number">1</span></span><br><span class="line">                <span class="keyword">while</span> data[i][n] == <span class="number">0</span> <span class="keyword">and</span> n &lt; <span class="number">3</span>:</span><br><span class="line">                    n = n + <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> t[index] == data[i][n]:</span><br><span class="line">                    t[index], data[i][n] = t[index] + data[i][n], <span class="number">0</span></span><br><span class="line">                    x += <span class="number">1</span></span><br><span class="line">                index += <span class="number">1</span></span><br><span class="line">        t[index] = data[i][<span class="number">3</span>]</span><br><span class="line">        data[i] = t</span><br><span class="line"></span><br><span class="line"><span class="comment"># 向右</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">to_right</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">        index = <span class="number">3</span></span><br><span class="line">        t = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">3</span>, <span class="number">0</span>, <span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">if</span> data[i][x] &gt; <span class="number">0</span>:</span><br><span class="line">                t[index] = data[i][x]</span><br><span class="line">                data[i][x] = <span class="number">0</span></span><br><span class="line">                n = x - <span class="number">1</span></span><br><span class="line">                <span class="keyword">while</span> data[i][n] == <span class="number">0</span> <span class="keyword">and</span> n &gt;= <span class="number">0</span>:</span><br><span class="line">                    n = n - <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> t[index] == data[i][n]:</span><br><span class="line">                    t[index], data[i][n] = t[index] + data[i][n], <span class="number">0</span></span><br><span class="line">                    x -= <span class="number">1</span></span><br><span class="line">                index -= <span class="number">1</span></span><br><span class="line">        t[index] = data[i][<span class="number">0</span>]</span><br><span class="line">        data[i] = t</span><br><span class="line"></span><br><span class="line"><span class="comment"># 向上</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">to_top</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">        index = <span class="number">0</span></span><br><span class="line">        t = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">            <span class="keyword">if</span> data[x][i] &gt; <span class="number">0</span>:</span><br><span class="line">                t[index] = data[x][i]</span><br><span class="line">                data[x][i] = <span class="number">0</span></span><br><span class="line">                n = x + <span class="number">1</span></span><br><span class="line">                <span class="keyword">while</span> data[n][i] == <span class="number">0</span> <span class="keyword">and</span> n &lt; <span class="number">3</span>:</span><br><span class="line">                    n = n + <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> t[index] == data[n][i]:</span><br><span class="line">                    t[index], data[n][i] = t[index] + data[n][i], <span class="number">0</span></span><br><span class="line">                    x += <span class="number">1</span></span><br><span class="line">                index += <span class="number">1</span></span><br><span class="line">        t[index] = data[<span class="number">3</span>][i]</span><br><span class="line">        data[:, i] = t</span><br><span class="line"></span><br><span class="line"><span class="comment"># 向下</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">to_bottom</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">        index = <span class="number">3</span></span><br><span class="line">        t = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">3</span>, <span class="number">0</span>, <span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">if</span> data[x][i] &gt; <span class="number">0</span>:</span><br><span class="line">                t[index] = data[x][i]</span><br><span class="line">                data[x][i] = <span class="number">0</span></span><br><span class="line">                n = x - <span class="number">1</span></span><br><span class="line">                <span class="keyword">while</span> data[n][i] == <span class="number">0</span> <span class="keyword">and</span> n &gt;= <span class="number">0</span>:</span><br><span class="line">                    n = n - <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> t[index] == data[n][i]:</span><br><span class="line">                    t[index], data[n][i] = t[index] + data[n][i], <span class="number">0</span></span><br><span class="line">                    x -= <span class="number">1</span></span><br><span class="line">                index -= <span class="number">1</span></span><br><span class="line">        t[index] = data[<span class="number">0</span>][i]</span><br><span class="line">        data[:, i] = t</span><br></pre></td></tr></table></figure><h3 id="6-其他函数和启动游戏"><a class="markdownIt-Anchor" href="#6-其他函数和启动游戏"></a> 6 其他函数和启动游戏</h3><p>还需要一个根据当前游戏数data[4x4]来生成游戏界面的函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成当前画面</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">game_image</span><span class="params">()</span>:</span></span><br><span class="line">    img = create_back()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">            x_start = <span class="number">10</span> + <span class="number">110</span> * i</span><br><span class="line">            y_start = <span class="number">10</span> + <span class="number">110</span> * j</span><br><span class="line">            x_end = x_start + <span class="number">100</span></span><br><span class="line">            y_end = y_start + <span class="number">100</span></span><br><span class="line">            block = create_block(data[i][j])</span><br><span class="line">            img[x_start:x_end, y_start:y_end] = block</span><br><span class="line">    <span class="keyword">return</span> img</span><br></pre></td></tr></table></figure><p>最后，进行调用启动游戏</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    game_run()</span><br></pre></td></tr></table></figure><p>画面如下<br /><img src="/img/loading.gif" class="lazyload" data-src="https://pic.downk.cc/item/5eb2c7d3c2a9a83be54d6e7c.gif"  alt="码农日志" /></p><p>尾巴：当然还有很多Bug，这里只是整理一些技术，玩一玩就好，真要写游戏肯定也不能拿Opencv来搞的。</p><hr /><blockquote><p><span style="color:gray;font-size:14px">关注公众号「码农日志」，每天带你发车。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图像识别 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>YouTube上最火的OpenCV-Python入门视频教程</title>
      <link href="/2019/03/01/2019/YouTube%E4%B8%8A%E6%9C%80%E7%81%AB%E7%9A%84OpenCV-Python%E5%85%A5%E9%97%A8%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B/"/>
      <url>/2019/03/01/2019/YouTube%E4%B8%8A%E6%9C%80%E7%81%AB%E7%9A%84OpenCV-Python%E5%85%A5%E9%97%A8%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p><span style="color:green;font-size:14px">分享一些最近学习的技能树 ---- 图像识别。</p></blockquote><hr /><p><img src="/img/loading.gif" class="lazyload" data-src="https://pic.downk.cc/item/5eb2c507c2a9a83be54a6bbf.png"  alt="码农日志" /><br />今天跟大家推荐一份YouTube上最火的 OpenCV-Python 入门视频教程，该教程由CodeBind网站博主录制，从今年2月份到现在已经录制了38个主题。</p><p><img src="/img/loading.gif" class="lazyload" data-src="https://pic.downk.cc/item/5eb2c507c2a9a83be54a6bc8.jpg"  alt="码农日志" /></p><p>地址：<br /><a href="https://www.youtube.com/playlist?list=PLS1QulWo1RIa7D1O6skqDQ-JZ1GGHKK-K" target="_blank" rel="noopener">https://www.youtube.com/playlist?list=PLS1QulWo1RIa7D1O6skqDQ-JZ1GGHKK-K</a></p><p>目前已有26万+人次观看，是目前 YouTube 上最受欢迎的OpenCV视频教程。</p><p>网上有很多免费的OpenCV视频教程，但多半是比较老旧的，该课程基于 OpenCV 4 以上版本，主要面向零基础的朋友，会手把手一行行代码教学展示。</p><p>其主要内容如下：</p><p>由基础到应用，包含内容：OpenCV的介绍、安装、图片视频读写、基本GUI使用、Mat操作、二值化、形态学操作、边缘检测、图像融合、基于轮廓的运动检测跟踪、霍夫变换与形状检测、车道线检测、目标检测、角点检测等。</p><p>该教程适合有一定英语基础对OpenCV编程感兴趣的初学者。</p><p>网站主页：</p><p><a href="http://www.codebind.com/" target="_blank" rel="noopener">http://www.codebind.com/</a></p><hr /><blockquote><p><span style="color:gray;font-size:14px">关注公众号「码农日志」，每天带你发车。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图像识别 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker学习笔记之用法与配置</title>
      <link href="/2018/12/01/2018/Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E7%94%A8%E6%B3%95%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
      <url>/2018/12/01/2018/Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E7%94%A8%E6%B3%95%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p><span style="color:green;font-size:14px">希望这篇日志通过记录自己在工作中用到的要点，达到对知识的梳理。当然，如果能对大家有帮助就太好了。</p></blockquote><hr /><h2 id="基础用法"><a class="markdownIt-Anchor" href="#基础用法"></a> 基础用法</h2><p>Docker镜像包括官方镜像和私有镜像。因为国情的原因，推荐通过阿里云mirror.aliyuncs.com进行镜像加速，镜像保持和官方一致，关键是速度快，此镜像库仅含有流行的公有镜像。<br />加速方法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo vim /etc/docker/daemon.json <span class="comment"># 修改docker配置文件daemon.json</span></span></span><br><span class="line">&#123; </span><br><span class="line">    "defult-runtime": "nvidia",</span><br><span class="line">        "runtimes": &#123;</span><br><span class="line">            "nvidia": &#123;</span><br><span class="line">            "path": "/usr/bin/nvidia-container-runtime",</span><br><span class="line">            "runtimeArgs": []</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, </span><br><span class="line">    "registry-mirrors":["https://dz6y5itv.mirror.aliyuncs.com"],</span><br><span class="line">    "insecure-registries":["192.167.8.128:6000"]</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo service docker restart <span class="comment"># 修改后需重启docker</span></span></span><br></pre></td></tr></table></figure><p>上面参数的一些解释：</p><blockquote><p>default-runtime – 指定了运行环境为nvidia，因为在容器内使用显卡资源的话，必须安装使用nvidia-docker。</p><p>runtimes – 指定了运行环境的路径和参数。</p><p>registry-mirrors – 指定docker仓库加速器的地址，这一步必须配置。</p><p>insecure-registries – 指定公司自建的私有仓库地址。</p></blockquote><h3 id="常用命令及帮助"><a class="markdownIt-Anchor" href="#常用命令及帮助"></a> 常用命令及帮助</h3><p>有了上边的基础配置，就可以欢快的使用Docker了，工具的使用离不开对操作命令的熟悉和实操，让我们开始吧。</p><p>搜索镜像源中的ubuntu镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo docker search ubuntu</span></span><br></pre></td></tr></table></figure><p>拉取镜像源中的ubuntu镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo docker pull ubuntu</span></span><br></pre></td></tr></table></figure><p>推送本地镜像到镜像源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo docker push </span></span><br><span class="line">192.167.8.128:6000/ubuntu:16.04 # 私有源已配置</span><br></pre></td></tr></table></figure><p>查看本地所有镜像列表</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo docker images</span></span><br></pre></td></tr></table></figure><p>创建容器（推荐使用docker-compose）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo docker run -it ubuntu:16.04 /bin/bash</span></span><br><span class="line">docker run -- 创建并运行一个容器</span><br><span class="line">it -- 交互模式启动并分配一个伪终端</span><br><span class="line">ubuntu:16.04 -- 使用 ubuntu 基础镜像16.04</span><br><span class="line">/bin/bash -- 运行命令 bash shell（容器的伪终端如果没有运行命令的话，容器会立即停止运行，创建容器时必须输入启动命令）</span><br></pre></td></tr></table></figure><p>查看并搜索当前系统所有ubuntu容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo docker ps -a | grep ubuntu</span></span><br></pre></td></tr></table></figure><p>查看当前正在运行的容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo docker ps</span></span><br></pre></td></tr></table></figure><p>dcoker 帮助命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo docker <span class="comment"># docker 命令帮助</span></span></span><br><span class="line">Commands:</span><br><span class="line">attach Attach to a running container # 当前 shell 下 attach 连接指定运行镜像</span><br><span class="line">build Build an image from a Dockerfile # 通过 Dockerfile 定制镜像</span><br><span class="line">commit Create a new image from a container's changes # 提交当前容器为新的镜像</span><br><span class="line">cp Copy files/folders from the containers filesystem to the host path</span><br><span class="line"><span class="meta">#</span><span class="bash"> 从容器中拷贝指定文件或者目录到宿主机中</span></span><br><span class="line">create Create a new container # 创建一个新的容器，同 run，但不启动容器</span><br><span class="line">diff Inspect changes on a container's filesystem # 查看 docker 容器变化</span><br><span class="line">events Get real time events from the server # 从 docker 服务获取容器实时事件</span><br><span class="line">exec Run a command in an existing container # 在已存在的容器上运行命令</span><br><span class="line">export Stream the contents of a container as a tar archive</span><br><span class="line"><span class="meta">#</span><span class="bash"> 导出容器的内容流作为一个 tar 归档文件[对应 import ]</span></span><br><span class="line">history Show the history of an image # 展示一个镜像形成历史</span><br><span class="line">images List images # 列出系统当前镜像</span><br><span class="line">import Create a new filesystem image from the contents of a tarball</span><br><span class="line"><span class="meta">#</span><span class="bash"> 从tar包中的内容创建一个新的文件系统映像[对应 <span class="built_in">export</span>]</span></span><br><span class="line">info Display system-wide information # 显示系统相关信息</span><br><span class="line">inspect Return low-level information on a container # 查看容器详细信息</span><br><span class="line">kill Kill a running container # kill 指定 docker 容器</span><br><span class="line">load Load an image from a tar archive # 从一个 tar 包中加载一个镜像[对应 save]</span><br><span class="line">login Register or Login to the docker registry server</span><br><span class="line"><span class="meta">#</span><span class="bash"> 注册或者登陆一个 docker 源服务器</span></span><br><span class="line">logout Log out from a Docker registry server # 从当前 Docker registry 退出</span><br><span class="line">logs Fetch the logs of a container # 输出当前容器日志信息</span><br><span class="line">port Lookup the public-facing port which is NAT-ed to PRIVATE_PORT</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看映射端口对应的容器内部源端口</span></span><br><span class="line">pause Pause all processes within a container # 暂停容器</span><br><span class="line">ps List containers # 列出容器列表</span><br><span class="line">pull Pull an image or a repository from the docker registry server</span><br><span class="line"><span class="meta">#</span><span class="bash"> 从docker镜像源服务器拉取指定镜像或者库镜像</span></span><br><span class="line">push Push an image or a repository to the docker registry server</span><br><span class="line"><span class="meta">#</span><span class="bash"> 推送指定镜像或者库镜像至docker源服务器</span></span><br><span class="line">restart Restart a running container # 重启运行的容器</span><br><span class="line">rm Remove one or more containers # 移除一个或者多个容器</span><br><span class="line">rmi Remove one or more images</span><br><span class="line"><span class="meta">#</span><span class="bash"> 移除一个或多个镜像[无容器使用该镜像才可删除，否则需删除相关容器才可继续或 -f 强制删除]</span></span><br><span class="line">run Run a command in a new container</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建一个新的容器并运行一个命令</span></span><br><span class="line">save Save an image to a tar archive # 保存一个镜像为一个 tar 包[对应 load]</span><br><span class="line">search Search for an image on the Docker Hub # 在 docker hub 中搜索镜像</span><br><span class="line">start Start a stopped containers # 启动容器</span><br><span class="line">stop Stop a running containers # 停止容器</span><br><span class="line">tag Tag an image into a repository # 给源中镜像打标签</span><br><span class="line">top Lookup the running processes of a container # 查看容器中运行的进程信息</span><br><span class="line">unpause Unpause a paused container # 取消暂停容器</span><br><span class="line">version Show the docker version information # 查看 docker 版本号</span><br><span class="line">wait Block until a container stops, then print its exit code</span><br><span class="line"><span class="meta">#</span><span class="bash"> 截取容器停止时的退出状态值</span></span><br><span class="line">Run 'docker COMMAND --help' for more information on a command.</span><br></pre></td></tr></table></figure><p>查看当前系统docker信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo docker info <span class="comment"># 容器和镜像个数以及磁盘使用系统信息</span></span></span><br></pre></td></tr></table></figure><p>删除一个或多个镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo docker rmi 镜像id或名字</span></span><br></pre></td></tr></table></figure><p>删除一个或多个容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo docker rm 容器id或名字</span></span><br></pre></td></tr></table></figure><p>docker run命令详解</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo docker run --<span class="built_in">help</span></span></span><br><span class="line">Usage: docker run [OPTIONS] IMAGE [COMMAND] [ARG...] Run a command in a new container</span><br><span class="line">-a, --attach=[] Attach to stdin, stdout or stderr.</span><br><span class="line">-c, --cpu-shares=0 CPU shares (relative weight) # 设置 cpu 使用权重</span><br><span class="line">--cap-add=[] Add Linux capabilities</span><br><span class="line">--cap-drop=[] Drop Linux capabilities</span><br><span class="line">--cidfile="" Write the container ID to the file # 把容器 id 写入到指定文件</span><br><span class="line">--cpuset="" CPUs in which to allow execution (0-3, 0,1) # cpu 绑定</span><br><span class="line">-d, --detach=false Detached mode: Run container in the background, print new container id # 后台运行容器</span><br><span class="line">--device=[] Add a host device to the container (e.g. --device=/dev/sdc:/dev/xvdc) </span><br><span class="line">--dns=[] Set custom dns servers # 设置 dns --dns-search=[] Set custom dns search domains # 设置 dns 域搜索</span><br><span class="line">-e, --env=[] Set environment variables # 定义环境变量</span><br><span class="line">--entrypoint="" Overwrite the default entrypoint of the image # ？</span><br><span class="line">--env-file=[] Read in a line delimited file of ENV variables # 从指定文件读取变量值</span><br><span class="line">--expose=[] Expose a port from the container without publishing it to your host # 指定对外提供服务端口</span><br><span class="line">-h, --hostname="" Container host name # 设置容器主机名</span><br><span class="line">-i, --interactive=false Keep stdin open even if not attached # 保持标准输出开启即使没有 attached</span><br><span class="line">--link=[] Add link to another container (name:alias) # 添加链接到另外一个容器</span><br><span class="line">--lxc-conf=[] (lxc exec-driver only) Add custom lxc options</span><br><span class="line">--lxc-conf="lxc.cgroup.cpuset.cpus = 0,1" </span><br><span class="line">-m, --memory="" Memory limit (format: &lt;number&gt;&lt;optional unit&gt;, where unit = b, k, m or g) # 内存限制</span><br><span class="line">--name="" Assign a name to the container # 设置容器名</span><br><span class="line">--net="bridge" Set the Network mode for the container # 设置容器网络模式 'bridge': creates a new network stack for the container on the docker bridge 'none': no networking for this container 'container:&lt;name|id&gt;': reuses another container network stack 'host': use the host network stack inside the container. Note: the host mode gives the container full access to local system services such as D-bus and is therefore considered insecure.</span><br><span class="line">-P, --publish-all=false Publish all exposed ports to the host interfaces # 自动映射容器对外提供服务的端口</span><br><span class="line">-p, --publish=[] Publish a container's port to the host' # 指定端口映射</span><br><span class="line">    format: ip:hostPort:containerPort | ip::containerPort | hostPort:containerPort (use 'docker port' to see the actual mapping) </span><br><span class="line">--privileged=false Give extended privileges to this container # 提供更多的权限给容器</span><br><span class="line">--restart="" Restart policy to apply when a container exits (no, on-failure[:max-retry], always) </span><br><span class="line">--rm=false Automatically remove the container when it exits (incompatible with -d) # 如果容器退出自动移除和 -d 选项冲突</span><br><span class="line">--security-opt=[] Security Options</span><br><span class="line">--sig-proxy=true Proxify received signals to the process (even in non-tty mode). SIGCHLD is not proxied.</span><br><span class="line">-t, --tty=false Allocate a pseudo-tty # 分配伪终端 -u, --user="" Username or UID # 指定运行容器的用户 uid 或者用户名</span><br><span class="line">-v, --volume=[] Bind mount a volume (e.g., from the host: -v /host:/container, from docker: -v /container) # 挂载卷</span><br><span class="line">--volumes-from=[] Mount volumes from the specified container(s) # 从指定容器挂载卷</span><br><span class="line">-w, --workdir="" Working directory inside the container # 指定容器工作目录</span><br></pre></td></tr></table></figure><p>启动和停止容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker start 容器id或名字</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker stop  容器id或名字</span></span><br></pre></td></tr></table></figure><p>提交指定容器为镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]<span class="comment"># 提交指定容器为镜像</span></span></span><br><span class="line">-a, --author="" Author (e.g., "John Hannibal Smith hannibal@a-team.com ")</span><br><span class="line">-m, --message="" Commit message</span><br><span class="line">-p, --pause=true Pause container during commit</span><br></pre></td></tr></table></figure><p>查看容器或镜像的详细信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker inspect 容器或镜像的id|名字</span></span><br></pre></td></tr></table></figure><p>查看指定容器日志信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker logs 容器id或名字</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 输出指定容器日志信息</span></span><br><span class="line">-f, --follow=false Follow log output</span><br><span class="line"><span class="meta">#</span><span class="bash"> 类似 tail -f</span></span><br><span class="line">-t, --timestamps=false Show timestamps</span><br><span class="line">--tail="all" Output the specified number of lines at the end of logs (defaults to all logs)</span><br></pre></td></tr></table></figure><h2 id="四种网络模式"><a class="markdownIt-Anchor" href="#四种网络模式"></a> 四种网络模式</h2><p>docker run或者docker-compose 创建 Docker 容器时，可以用 --net 选项指定容器的网络模式，Docker 有以下 4 种网络模式：</p><blockquote><p>host 模式，使用 --net=host 指定。</p><p>container 模式，使用 --net=container:NAMEorID 指定。</p><p>none 模式，使用 --net=none 指定。</p><p>bridge 模式，使用 --net=bridge 指定，默认设置。</p></blockquote><h3 id="host模式"><a class="markdownIt-Anchor" href="#host模式"></a> host模式</h3><p>如果启动容器的时候使用 host 模式，那么这个容器将不会获得一个独立的 Network Namespace，而是和宿主机共用一个 Network Namespace。容器将不会虚拟出自己的网卡，配置自己的 IP 等，而是使用宿主机的 IP 和端口。</p><p>例如，我们在 10.10.101.105/24 的机器上用 host 模式启动一个含有 web 应用的 Docker 容器，监听 tcp 80 端口。当我们在容器中执行任何类似 ifconfig 命令查看网络环境时，看到的都是宿主机上的信息。而外界访问容器中的应用，则直接使用 10.10.101.105:80 即可，不用任何 NAT 转换，就如直接跑在宿主机中一样。</p><p>但是，容器的其他方面，如文件系统、进程列表等还是和宿主机隔离的。</p><h3 id="container模式"><a class="markdownIt-Anchor" href="#container模式"></a> container模式</h3><p>这个模式指定新创建的容器和已经存在的一个容器共享一个 Network Namespace，而不是和宿主机共享。新创建的容器不会创建自己的网卡，配置自己的 IP，而是和一个指定的容器共享 IP、端口范围等。同样，两个容器除了网络方面，其他的如文件系统、进程列表等还是隔离的。两个容器的进程可以通过 lo 网卡设备通信。</p><h3 id="none模式"><a class="markdownIt-Anchor" href="#none模式"></a> none模式</h3><p>这个模式和前两个不同。在这种模式下，Docker 容器拥有自己的 Network Namespace，但是，并不为 Docker容器进行任何网络配置。也就是说，这个 Docker 容器没有网卡、IP、路由等信息。需要我们自己为 Docker 容器添加网卡、配置 IP 等。</p><h3 id="bridge模式"><a class="markdownIt-Anchor" href="#bridge模式"></a> bridge模式</h3><p>bridge 模式是 Docker 默认的网络设置，此模式会为每一个容器分配 Network Namespace、设置 IP 等，并将一个主机上的 Docker 容器连接到一个虚拟网桥上。</p><p>当 Docker server 启动时，会在主机上创建一个名为 docker0 的虚拟网桥，此主机上启动的 Docker 容器会连接到这个虚拟网桥上。虚拟网桥的工作方式和物理交换机类似，这样主机上的所有容器就通过交换机连在了一个二层网络中。接下来就要为容器分配 IP 了，Docker 会从 RFC1918 所定义的私有 IP 网段中，选择一个和宿主机不同的IP地址和子网分配给 docker0，连接到 docker0 的容器就从这个子网中选择一个未占用的 IP 使用。</p><p>如一般 Docker 会使用 172.17.0.0/16 这个网段，并将 172.17.42.1/16 分配给 docker0 网桥（在主机上使用 ifconfig 命令是可以看到 docker0 的，可以认为它是网桥的管理接口，在宿主机上作为一块虚拟网卡使用）</p><p>推荐了解</p><p>工具docker-compose如何使用，以及如何编写高效构建镜像的dockerfile文件。</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript内存空间及this关键词详解</title>
      <link href="/2018/07/12/2019/JavaScript%E5%86%85%E5%AD%98%E7%A9%BA%E9%97%B4%E5%8F%8Athis%E5%85%B3%E9%94%AE%E8%AF%8D%E8%AF%A6%E8%A7%A3/"/>
      <url>/2018/07/12/2019/JavaScript%E5%86%85%E5%AD%98%E7%A9%BA%E9%97%B4%E5%8F%8Athis%E5%85%B3%E9%94%AE%E8%AF%8D%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><hr /><p>理解JS内存空间，对于我们理解很多题目大有帮助，特别是一些面试题目。例如下面这个题目：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var a = 20;</span><br><span class="line">var b = a;</span><br><span class="line">b = 30;</span><br><span class="line">// 这时a的值是多少？</span><br><span class="line"></span><br><span class="line">var m = &#123; a: 10, b: 20 &#125;</span><br><span class="line">var n = m;</span><br><span class="line">n.a = 15;</span><br><span class="line">// 这时m.a的值是多少</span><br></pre></td></tr></table></figure><p>很多朋友搞不清楚。</p><p>还有一个this方面的面试题目。大体如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">   var a = 20;</span><br><span class="line">    var devezhang = &#123;</span><br><span class="line">        a: 10,</span><br><span class="line">        c: this.a + 20,</span><br><span class="line">        fn: function () &#123;</span><br><span class="line">            return this.a;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    console.log(devezhang.c);</span><br><span class="line">    console.log(devezhang.fn());</span><br><span class="line">var haoobj=devezhang.fn;</span><br><span class="line">console.log(haoobj())</span><br></pre></td></tr></table></figure><p>大家看看上面会输出什么？下面我就和大家一起来剖析一下这两个问题。这两个问题涉及到JS内存空间及this关键词的相关知识，通过普及这些知识，来顺便解释一下这两个题目。</p><h2 id="js内存空间"><a class="markdownIt-Anchor" href="#js内存空间"></a> JS内存空间</h2><hr /><p>下面我们先来理一下一个概念。</p><h3 id="栈与堆"><a class="markdownIt-Anchor" href="#栈与堆"></a> 栈与堆</h3><hr /><p>其实JS中没有严格意义区分栈内存和堆内存。但是我在理解的时候还是把他们分开了！我个人是如下理解的：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">变量对象与基础数据类型（例如：Undefined、Null、Boolean、Number、String）都放在栈（stack）里</span><br><span class="line">引用数据类型，比如：对象，数组等一般都放在堆（heap）里</span><br></pre></td></tr></table></figure><p>例如如下代码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var a1 = 0;   // 变量对象</span><br><span class="line">var a2 = 'this is string'; // 变量对象</span><br><span class="line">var a3 = null; // 变量对象</span><br><span class="line"></span><br><span class="line">var b = &#123; m: 20 &#125;; // 变量b存在于变量对象中也可以理解为栈，&#123;m: 20&#125; 作为对象存在于堆内存中</span><br><span class="line">var c = [1, 2, 3]; // 变量c存在于变量对象中也可以理解为栈，[1, 2, 3] 作为对象存在于堆内存中</span><br></pre></td></tr></table></figure><p>基础数据类型也可以理解为栈里的数据都是按值访问，我们可以直接操作保存在变量中的实际的值。但是在堆内存中，我们不能直接操作对象的堆内存空间。在操作堆里的对象时，实际上是在操作对象的引用而不是实际的对象。因此，引用类型的值都是按引用访问的。我们可以地把引用理解为保存在变量对象中的一个地址，这个地址是和堆内存的值是相关联的。</p><p>那么上面的面试题目我们可以用如下图来解释：</p><p><img src="/img/loading.gif" class="lazyload" data-src="https://res.cloudinary.com/devezhang/image/upload/v1573031893/blog/2019-05-05-1_ghwrw2.png"  alt="码农日志" /></p><p>因此a还是20</p><p>第二个题目：</p><p><img src="/img/loading.gif" class="lazyload" data-src="https://res.cloudinary.com/devezhang/image/upload/v1573031893/blog/2019-05-05-2_mesw7b.png"  alt="码农日志" /></p><p>复制之后是引用的复制。修改了堆里面的对象之后，n和m对应的是同一个对象，因此输出m.a会变成15</p><h2 id="关于this"><a class="markdownIt-Anchor" href="#关于this"></a> 关于this</h2><hr /><p>关于this的解释，我前面也有过一篇文章，虽然写了一点点东西，但是写的比较浅。下面我就详细介绍一下this</p><p>函数中的this是难点和重点，我今天主要讲讲函数中的this</p><p>我对函数调用总结了如下三点：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1、this的指向，是在函数被调用的时候确定的</span><br><span class="line"></span><br><span class="line">2、函数调用时，看其是否被某个对象所拥有，假如被某个对象拥有，那么函数中的this，指向的是其拥有的对象。</span><br><span class="line"></span><br><span class="line">例如：</span><br><span class="line"></span><br><span class="line">   devezhang.fn()</span><br><span class="line"></span><br><span class="line">fn()函数被devezhang所拥有，那么fn里面的this，指向的是devezhang</span><br><span class="line"></span><br><span class="line">3、如果函数独立调用，那么该函数内部的this，则指向undefined。在非严格模式中，当this指向undefined时，它会被自动指向全局对象。</span><br><span class="line"></span><br><span class="line">例如haoobj() 是独立调用，那么haoobj函数里面的this会指向undefined，在非严格模式下面指向的是全局对象。</span><br></pre></td></tr></table></figure><p>通过上面的三条结论，我们对于函数的调用应该很清楚了，我们再来看下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">devezhang.c</span><br></pre></td></tr></table></figure><p>这个不是我们上面所说的函数情况，因此，还有一个结论：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">当devezhang 在全局声明时，无论devezhang.c在什么地方调用，这里的this都指向全局对象，</span><br><span class="line"></span><br><span class="line">而当devezhang在函数环境中声明时，这个this指向undefined，在非严格模式下，会自动转向全局对象。</span><br></pre></td></tr></table></figure><p>我们再来看下上面的题目吧：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">console.log(devezhang.c);</span><br><span class="line">console.log(devezhang.fn());</span><br><span class="line">var haoobj=devezhang.fn;</span><br><span class="line">console.log(haoobj())</span><br></pre></td></tr></table></figure><p>通过上面的结论，我们可以解释：</p><h3 id="consolelogdevezhangc"><a class="markdownIt-Anchor" href="#consolelogdevezhangc"></a> console.log(devezhang.c)</h3><p>devezhang是全局声明devezhang.c在非严格模式下面指向的是window全局对象，因此：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.a + 20</span><br></pre></td></tr></table></figure><p>输出40</p><h3 id="consolelogdevezhangfn"><a class="markdownIt-Anchor" href="#consolelogdevezhangfn"></a> console.log(devezhang.fn());</h3><p>fn()是devezhang对象下面的函数，这里this指向的是devezhang，因此输出的是10</p><h3 id="consoleloghaoobj"><a class="markdownIt-Anchor" href="#consoleloghaoobj"></a> console.log(haoobj())</h3><p>haoobj()函数是独立调用，指向的是全局，因此输出20</p><h2 id="小结"><a class="markdownIt-Anchor" href="#小结"></a> 小结</h2><hr /><p>JS内存空间，关键理清堆里面的数据，在操作堆里的对象时，实际上是在操作对象的引用而不是实际的对象。</p><p>this关键词要理清函数调用，是独立调用还是被某个对象所调用。独立调用在非严格模式下面指向的是全局，被某个对象所调用，this指向的是某个对象！</p><hr /><blockquote><p><span style="color:gray;font-size:14px">关注公众号「码农日志」，每天带你发车。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python快速实现HTTP和FTP服务器</title>
      <link href="/2018/02/13/2018/Python%E5%BF%AB%E9%80%9F%E5%AE%9E%E7%8E%B0HTTP%E5%92%8CFTP%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2018/02/13/2018/Python%E5%BF%AB%E9%80%9F%E5%AE%9E%E7%8E%B0HTTP%E5%92%8CFTP%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="用-python-快速实现-http-服务器"><a class="markdownIt-Anchor" href="#用-python-快速实现-http-服务器"></a> 用 Python 快速实现 HTTP 服务器</h3><p>有时你需临时搭建一个简单的 Web Server，但你又不想去安装 Apache、Nginx 等这类功能较复杂的 HTTP 服务程序时。这时可以使用 Python 内建的 SimpleHTTPServer 模块快速搭建一个简单的 HTTP 服务器。</p><p>SimpleHTTPServer 模块可以把你指定目录中的文件和文件夹以一个简单的 Web 页面的方式展示出来。假设我们需要以 Web 方式共享目录 /Users/Mike/Docker，只需要以下这个命令行就可以轻松实现：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /Users/Mike/Docker</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> python -m SimpleHTTPServer</span></span><br><span class="line">Serving HTTP on 0.0.0.0 port 8000 ...</span><br></pre></td></tr></table></figure><p>SimpleHTTPServer 模块默认会在 8000 端口上监听一个 HTTP 服务，这时就可以打开浏览器输入 <a href="http://IP" target="_blank" rel="noopener">http://IP</a>:Port 访问这个 Web 页面。例如类似下面的 URL：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.100.49:8000</span><br></pre></td></tr></table></figure><p>如果你需要 Web 服务有一个默认页，可以在目录下创建一个名为 index.html 的文件。如果没有默认页，那么会以列表的形式将目录中的内容显示出来。</p><p>如果默认的 8000 端口已经被占用，你想换成使用其它端口号，可以使用如下的命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> python -m SimpleHTTPServer 8080</span></span><br></pre></td></tr></table></figure><h3 id="用-python-快速实现-ftp-服务器"><a class="markdownIt-Anchor" href="#用-python-快速实现-ftp-服务器"></a> 用 Python 快速实现 FTP 服务器</h3><p>有时当你想快速搭建一个 FTP 服务器来临时实现文件上传下载时，这是特别有用的。我们这里利用 Python 的 Pyftpdlib 模块可以快速的实现一个 FTP 服务器的功能。</p><p>首先安装 Pyftpdlib 模块</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo pip install pyftpdlib</span></span><br></pre></td></tr></table></figure><p>通过 Python 的 -m 选项将 Pyftpdlib 模块作为一个简单的独立服务器来运行，假设我们需要共享目录 /Users/Mike/Docker，只需要以下这个命令行就可以轻松实现：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /Users/Mike/Docker</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> python -m pyftpdlib</span></span><br><span class="line">[I 2018-01-02 16:24:02] &gt;&gt;&gt; starting FTP server on :::2121, pid=7517 &lt;&lt;&lt;</span><br><span class="line">[I 2018-01-02 16:24:02] concurrency model: async</span><br><span class="line">[I 2018-01-02 16:24:02] masquerade (NAT) address: None</span><br><span class="line">[I 2018-01-02 16:24:02] passive ports: None</span><br></pre></td></tr></table></figure><p>至此一个简单的 FTP 服务器已经搭建完成，访问 <a href="ftp://IP">ftp://IP</a>:PORT 即可。例如类似下面的 URL：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ftp://192.168.100.49:2121</span><br></pre></td></tr></table></figure><blockquote><p>默认 IP 为本机所有可用 IP，端口为 2121。<br />默认登陆方式为匿名。<br />默认权限是只读。</p></blockquote><p>如果你要建一个有认证且可写的 FTP 服务器，可使用类似以下指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> python -m pyftpdlib -i 192.168.100.49 -w -d /tmp/ -u mike -P 123456</span></span><br></pre></td></tr></table></figure><h3 id="小插曲"><a class="markdownIt-Anchor" href="#小插曲"></a> 小插曲</h3><hr /><p>测试时一直使用密码 000000 这样的弱密码做认证密码，在客户端登陆时一直提示认证失败。看来 Pyftpdlib 模块还做了基本的安全策略哟，不错的！</p><p>常用可选参数说明:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-i 指定IP地址（默认为本机所有可用 IP 地址）</span><br><span class="line">-p 指定端口（默认为 2121）</span><br><span class="line">-w 写权限（默认为只读）</span><br><span class="line">-d 指定目录 （默认为当前目录）</span><br><span class="line">-u 指定登录用户名</span><br><span class="line">-P 指定登录密码</span><br></pre></td></tr></table></figure><p>更多参数可以使用以下指令查询：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> python -m pyftpdlib --<span class="built_in">help</span></span></span><br><span class="line"></span><br><span class="line">Usage: python -m pyftpdlib [options]</span><br><span class="line"></span><br><span class="line">Start a stand alone anonymous FTP server.</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -h, --help</span><br><span class="line">     show this help message and exit</span><br><span class="line"></span><br><span class="line">  -i ADDRESS, --interface=ADDRESS</span><br><span class="line">     specify the interface to run on (default all interfaces)</span><br><span class="line"></span><br><span class="line">  -p PORT, --port=PORT</span><br><span class="line">     specify port number to run on (default 2121)</span><br><span class="line"></span><br><span class="line">  -w, --write</span><br><span class="line">     grants write access for logged in user (default read-only)</span><br><span class="line"></span><br><span class="line">  -d FOLDER, --directory=FOLDER</span><br><span class="line">     specify the directory to share (default current directory)</span><br><span class="line"></span><br><span class="line">  -n ADDRESS, --nat-address=ADDRESS</span><br><span class="line">     the NAT address to use for passive connections</span><br><span class="line"></span><br><span class="line">  -r FROM-TO, --range=FROM-TO</span><br><span class="line">     the range of TCP ports to use for passive connections (e.g. -r 8000-9000)</span><br><span class="line"></span><br><span class="line">  -D, --debug</span><br><span class="line">     enable DEBUG logging evel</span><br><span class="line"></span><br><span class="line">  -v, --version</span><br><span class="line">     print pyftpdlib version and exit</span><br><span class="line"></span><br><span class="line">  -V, --verbose</span><br><span class="line">     activate a more verbose logging</span><br><span class="line"></span><br><span class="line">  -u USERNAME, --username=USERNAME</span><br><span class="line">     specify username to login with (anonymous login will be disabled and password required if supplied)</span><br><span class="line"></span><br><span class="line">  -P PASSWORD, --password=PASSWORD</span><br><span class="line">     specify a password to login with (username required to be useful)</span><br></pre></td></tr></table></figure><p>如果你需卸载 Pyftpdlib 模块，可以通过以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pip uninstall pyftpdlib</span></span><br></pre></td></tr></table></figure><p>参考文档</p><p><a href="http://www.google.com" target="_blank" rel="noopener">http://www.google.com</a><br /><a href="https://coolshell.cn/articles/1480.html" target="_blank" rel="noopener">https://coolshell.cn/articles/1480.html</a><br /><a href="http://pyftpdlib.readthedocs.io/en/latest/index.html" target="_blank" rel="noopener">http://pyftpdlib.readthedocs.io/en/latest/index.html</a><br /><a href="https://my.oschina.net/kangvcar/blog/1599867" target="_blank" rel="noopener">https://my.oschina.net/kangvcar/blog/1599867</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>与父亲的观点不合</title>
      <link href="/2014/12/30/2014/%E4%B8%8E%E7%88%B6%E4%BA%B2%E7%9A%84%E8%A7%82%E7%82%B9%E4%B8%8D%E5%90%88/"/>
      <url>/2014/12/30/2014/%E4%B8%8E%E7%88%B6%E4%BA%B2%E7%9A%84%E8%A7%82%E7%82%B9%E4%B8%8D%E5%90%88/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p><span style="color:green;font-size:14px">清明节到了，它叫醒了我过去的回忆，这是我大三的一篇日记。</p></blockquote><hr /><h4 id="日记内容"><a class="markdownIt-Anchor" href="#日记内容"></a> 日记内容</h4><p>父亲生病住院，母亲咳嗽。我姐喜得千金，后天办喜事，哥和嫂子四口在东边住。<br />家庭琐事，却也是烦心事。父亲上午还在训话，我不会混人事，不知道跟村里在农大上班的董老师交往。<br />可是我不敢与之理论，一是我不知我的那些个想法是对还是错，二是我真的太倔太傲，或许是穷人固有的那种属性吧，我认为自己做事情之前必须先掂量自己的轻重，再去扮演怎样的一个高度。而现实呢，或许一切是我自卑的原因吧。<br />好久没有学习，好久没有写日记，好久没有自省，我退步了，人也变得懒惰了。</p><video id="video" style="width:100%" controls="" preload="none" poster="https://res.cloudinary.com/devezhang/video/upload/v1585416894/blog/laugh_g9ugae.mp4"><source id="mp4" src="https://res.cloudinary.com/devezhang/video/upload/v1585416894/blog/laugh_g9ugae.mp4" type="video/mp4"></video><hr /><blockquote><p><span style="color:gray;font-size:14px">关注公众号「码农日志」，每天带你发车。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 回忆录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 碎碎念 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高四复习时的一篇日记</title>
      <link href="/2011/10/16/2011/%E9%AB%98%E5%9B%9B%E5%A4%8D%E4%B9%A0%E6%97%B6%E7%9A%84%E4%B8%80%E7%AF%87%E6%97%A5%E8%AE%B0/"/>
      <url>/2011/10/16/2011/%E9%AB%98%E5%9B%9B%E5%A4%8D%E4%B9%A0%E6%97%B6%E7%9A%84%E4%B8%80%E7%AF%87%E6%97%A5%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p><span style="color:green;font-size:14px">如果这一年的奋斗能给自己的内心一点安慰，我会拼死去完成使命，只为给父母，给自己一个交代。</p></blockquote><hr /><h5 id="恩师训言"><a class="markdownIt-Anchor" href="#恩师训言"></a> 恩师训言</h5><p>如果你不想上就赶紧走人！    By—邵剑（高四班主任）<br />别再无所谓了，时间很紧迫，早一步迈过这个坎。    By—赵向前（高三班主任）</p><p>今天星期日，第三次月考感想。</p><p>该怎么办？物理不及格，英语完形填空将近错完，甚至交卷时仍未作完！听着高一时与自己成绩相当的同学，如今我已距他千里之外，平时总说是这两三年的沉沦导致了今日的局面，为何自己却不采取一些补救的措施。为什么在高考过后，自己的决心那么大，总不能坚持，真的很难受。时常亲身感受到这个世界的号角，究竟该如何挽救！</p><p>明天又是新的一周，学生时代，渐渐大了的自己那么真切的感受到时间的流速，心中声嘶力竭的悲哀有谁听到。</p><p>从今往后：</p><ol><li>手机只作听歌，休息看书用。若上网，自己他妈的就不是人，不要脸！</li><li>把每一天当作一生来对待，好好珍惜，坐在那里就学习，哪怕就记住一个单词。</li><li>多读英语句子，卷子，做完数学，化学，物理题后要回想是否能重组一个思路，万不可过后烟消云散。</li></ol><p>我很后悔两年的堕落，虽然人不可后悔。我很害怕，努力挽不回那些期待的人想要的结果。</p><p>如果你还要脸，就不应该每天拿着手机上网，浪费大量的时间。<br />如果你还要脸，此刻你就应该拿起书本开始学习。因为是你以前丢尽了脸，而今你还有什么理由不要脸！<br />如果你能长一点脸，你永远不该去网吧那种地方！你以前的龌龊事难道给你的身心伤害还不够吗！醒醒吧，看看你爸，他年纪大了，已经需要你照顾他了，可是你却仍在燃烧他的生命，却不去努力，去那种地方，你有凭良心吗！想想妈妈的脸庞，要知道她是你最亲爱的人哪！<br />如果你能长一点脸，你就应该将那些感情小事放下一边，好好地痛彻痛悟！看看你的成绩，真不知道你的骄傲从何而来！<br />如果你还要脸，从此刻起做一个努力向上的好学生，把从前的都忘记，现在你站在起跑线上，所以有足够的动力去战胜别人。<br />如果你还要脸，请记住今天说的所有话！</p><p>晚自习于寝室内</p><hr /><blockquote><p><span style="color:gray;font-size:14px">关注公众号「码农日志」，每天带你发车。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 回忆录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 碎碎念 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友情链接</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>留言板 | 畅所欲言</title>
      <link href="/msgboard/index.html"/>
      <url>/msgboard/index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>有什么想说的？<br />有什么想问的？<br />有什么想吐槽的？<br />可以在下面留言…</p></blockquote>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>聆听内心的声音</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="经典音乐"><a class="markdownIt-Anchor" href="#经典音乐"></a> 经典音乐</h2>    <div id="aplayer-VLYlboYq" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="3048372179" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="none" data-theme="#ad7a86"    ></div><h2 id="coding-music"><a class="markdownIt-Anchor" href="#coding-music"></a> Coding Music</h2>    <div id="aplayer-DjsyiyLM" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="2352005537" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="none" data-theme="#ad7a86"    ></div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>记录幸福，留住瞬间</title>
      <link href="/photos/index.html"/>
      <url>/photos/index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><div class="gallery-group-main">  <figure class="gallery-group">  <img class="gallery-group-img" src='https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/IMG_0191.JPG'>  <figcaption>  <div class="gallery-group-name">北京</div>  <p>北京往事</p>  <a href='/photos/%E8%AE%B0%E5%BD%95%E5%8C%97%E4%BA%AC'></a>  </figcaption>  </figure>    <figure class="gallery-group">  <img class="gallery-group-img" src='https://i.loli.net/2019/11/10/T7Mu8Aod3egmC4Q.png'>  <figcaption>  <div class="gallery-group-name">2019</div>  <p>2019所见所得</p>  <a href='/photos/%E8%AE%B0%E5%BD%952019'></a>  </figcaption>  </figure>  </div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>关于自己</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="一句话"><a class="markdownIt-Anchor" href="#一句话"></a> 一句话</h3><blockquote><p>Talk is cheap, show me the code.</p></blockquote><h3 id="关于我"><a class="markdownIt-Anchor" href="#关于我"></a> 关于我</h3><blockquote><p>一个莫名其妙的，喜欢敲代码，喜欢研究技术的，表面上高冷、不苟言笑的，</p><p>偶尔又嬉皮笑脸，偶尔又特立独行的，双重性格的技术爱好者！</p><p>乐于认知输出，技术分享。</p></blockquote><h3 id="兴趣方向"><a class="markdownIt-Anchor" href="#兴趣方向"></a> 兴趣方向</h3><blockquote><p>Python、C++、Web。</p></blockquote><h3 id="参与社区"><a class="markdownIt-Anchor" href="#参与社区"></a> 参与社区</h3><blockquote><p>Github:<a href="https://github.com/PyElite" target="_blank" rel="noopener">https://github.com/PyElite</a></p><p>阿里云栖社区:<a href="https://yq.aliyun.com/u/devezhang" target="_blank" rel="noopener">https://yq.aliyun.com/u/devezhang</a></p></blockquote><h3 id="联系我"><a class="markdownIt-Anchor" href="#联系我"></a> 联系我</h3><blockquote><p>Email: <a href="mailto:devezhang@gmail.com">devezhang@gmail.com</a></p><p>公众号:<br /><img src="/img/loading.gif" class="lazyload" data-src="https://pic.downk.cc/item/5ea54751c2a9a83be5d63afb.jpg"  alt="home_posts_tag-true" /></p></blockquote>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>记录北京</title>
      <link href="/photos/%E8%AE%B0%E5%BD%95%E5%8C%97%E4%BA%AC/index.html"/>
      <url>/photos/%E8%AE%B0%E5%BD%95%E5%8C%97%E4%BA%AC/index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><div class="justified-gallery"><p><img src="/img/loading.gif" class="lazyload" data-src="https://gratisography.com/wp-content/uploads/2019/10/gratisography-scary-pumpkin-hand-900x600.jpg"  alt="" /><br /><img src="/img/loading.gif" class="lazyload" data-src="https://gratisography.com/wp-content/uploads/2019/10/gratisography-fresh-fish-dinner-900x600.jpg"  alt="" /><br /><img src="/img/loading.gif" class="lazyload" data-src="https://gratisography.com/wp-content/uploads/2019/10/gratisography-mountain-cloud-landscape-900x600.jpg"  alt="" /><br /><img src="/img/loading.gif" class="lazyload" data-src="https://picjumbo.com/wp-content/uploads/iphone-free-stock-photos-2210x3315.jpg"  alt="" /><br /><img src="/img/loading.gif" class="lazyload" data-src="https://picjumbo.com/wp-content/uploads/young-millennial-girl-drinking-lemonade-and-overlooking-the-city-2210x1473.jpg"  alt="" /><br /><img src="/img/loading.gif" class="lazyload" data-src="https://picjumbo.com/wp-content/uploads/modern-graphic-designer-essentials_free_stock_photos_picjumbo_HNCK4919-2210x1474.jpg"  alt="" /></p>          </div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>记录2019</title>
      <link href="/photos/%E8%AE%B0%E5%BD%952019/index.html"/>
      <url>/photos/%E8%AE%B0%E5%BD%952019/index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><div class="justified-gallery"><p><img src="/img/loading.gif" class="lazyload" data-src="https://gratisography.com/wp-content/uploads/2019/10/gratisography-scary-pumpkin-hand-900x600.jpg"  alt="" /><br /><img src="/img/loading.gif" class="lazyload" data-src="https://gratisography.com/wp-content/uploads/2019/10/gratisography-fresh-fish-dinner-900x600.jpg"  alt="" /><br /><img src="/img/loading.gif" class="lazyload" data-src="https://gratisography.com/wp-content/uploads/2019/10/gratisography-mountain-cloud-landscape-900x600.jpg"  alt="" /><br /><img src="/img/loading.gif" class="lazyload" data-src="https://picjumbo.com/wp-content/uploads/iphone-free-stock-photos-2210x3315.jpg"  alt="" /><br /><img src="/img/loading.gif" class="lazyload" data-src="https://picjumbo.com/wp-content/uploads/young-millennial-girl-drinking-lemonade-and-overlooking-the-city-2210x1473.jpg"  alt="" /><br /><img src="/img/loading.gif" class="lazyload" data-src="https://picjumbo.com/wp-content/uploads/modern-graphic-designer-essentials_free_stock_photos_picjumbo_HNCK4919-2210x1474.jpg"  alt="" /></p>          </div>]]></content>
      
    </entry>
    
    
  
</search>
